// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// models user related
model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  language  String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProfile {
  id               String          @id @default(cuid())
  email            String          @unique
  language         String
  country          String
  password         String
  firstName        String
  lastName         String
  avatar           String?
  dateOfBirth      DateTime?
  about            String?
  role             Role            @default(USER)
  favoriteArtists  ArtistProfile[]
  favoriteTracks   Track[]
  userPlaylists    UserPlaylist[]
  playedRecently   PlayedRecently? @relation(fields: [playedRecentlyId], references: [id])
  playedRecentlyId String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model PasswordResetRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model EmailChangeRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  newEmail   String
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// models music related
model ArtistProfile {
  id            String       @id @default(cuid())
  name          String
  slug          String       @unique
  bio           String?
  albums        Album[]
  tracks        Track[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String?
}

model Album {
  id        String          @id @default(cuid())
  title     String
  artists   ArtistProfile[]
  tracks    Track[]
  release   DateTime
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Track {
  id               String          @id @default(cuid())
  albumId          String
  title            String
  artists          ArtistProfile[]
  userPlaylists    UserPlaylist[]
  album            Album?          @relation(fields: [albumId], references: [id])
  length           Int
  release          DateTime
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  UserProfile      UserProfile?    @relation(fields: [userProfileId], references: [id])
  userProfileId    String?
  played           TrackPlayed[]
  playedRecently   PlayedRecently? @relation(fields: [playedRecentlyId], references: [id])
  playedRecentlyId String?
}

model UserPlaylist {
  id             String           @id @default(cuid())
  title          String
  author         UserProfile      @relation(fields: [authorId], references: [id])
  authorId       String
  tracks         Track[]
  length         Int
  userCreatedOn  DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PlaylistPlayed PlaylistPlayed[]
}

model TrackPlayed {
  id         String   @id @default(cuid())
  track      Track    @relation(fields: [trackId], references: [id])
  trackId    String
  datePlayed DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PlaylistPlayed {
  id         String       @id @default(cuid())
  playlist   UserPlaylist @relation(fields: [playlistId], references: [id])
  playlistId String
  datePlayed DateTime
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model PlayedRecently {
  id          String        @id @default(cuid())
  tracks      Track[]
  trackId     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userProfile UserProfile[]
}

enum Role {
  ADMIN
  USER
}
