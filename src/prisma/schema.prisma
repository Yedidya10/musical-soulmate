// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

// models user related
model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  language  String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String     @id @default(cuid())
  email              String?    @unique
  emailVerified      DateTime?
  image              String?
  spotifyDisplayName String
  spotifyUrl         String?    @unique
  playlists          Playlist[]
  accounts           Account[]
  sessions           Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// models playlist that are fit for spotify api, maybe we can add more fields later for another provider like youtube
model Playlist {
  id            String  @id
  name          String
  description   String?
  collaborative Boolean
  href          String
  public        Boolean
  primaryColor  String?
  snapshotId    String
  uri           String
  tracksHref    String
  tracks        Track[]
  tracksTotal   Int
  ownerId       String
  owner         User    @relation(fields: [ownerId], references: [id])
  images        Image[]
}

// models Image that are fit for spotify api, maybe we can add more fields later for another provider like youtube
model Image {
  id         Int       @id @default(autoincrement())
  height     Int?
  url        String
  width      Int?
  playlistId String?
  playlist   Playlist? @relation(fields: [playlistId], references: [id])
}

model Artist {
  id      String  @id @unique
  name    String
  albums  Album[]
  Tracks  Track[]
  trackId String?
}

model Album {
  id          String   @id @unique
  name        String
  releaseDate String
  totalTracks Int
  albumType   String
  artists     Artist[]
  tracks      Track[]
}

model Track {
  id               String       @id @unique
  name             String
  discNumber       Int
  durationMs       Int
  episode          Boolean
  explicit         Boolean
  isLocal          Boolean
  popularity       Int
  previewUrl       String?
  trackNumber      Int
  album            Album        @relation(fields: [albumId], references: [id])
  albumId          String
  artists          Artist[]
  externalUrls     ExternalUrls @relation(fields: [externalUrlsId], references: [id])
  externalIds      ExternalIds? @relation(fields: [externalIdsId], references: [id])
  availableMarkets String[]
  Playlist         Playlist?    @relation(fields: [playlistId], references: [id])
  playlistId       String?
  externalUrlsId   String
  externalIdsId    String?
}

model ExternalUrls {
  id      String  @id @unique
  spotify String
  Track   Track[]
}

model ExternalIds {
  id    String  @id @unique
  isrc  String
  Track Track[]
}

// model UserProfile {
//   id               String          @id @default(cuid())
//   email            String          @unique
//   language         String
//   country          String
//   password         String
//   firstName        String
//   lastName         String
//   avatar           String?
//   dateOfBirth      DateTime?
//   about            String?
//   role             Role            @default(USER)
//   favoriteArtists  ArtistProfile[]
//   favoriteTracks   Track[]
//   userPlaylists    UserPlaylist[]
//   playedRecently   PlayedRecently? @relation(fields: [playedRecentlyId], references: [id])
//   playedRecentlyId String?
//   createdAt        DateTime        @default(now())
//   updatedAt        DateTime        @updatedAt
// }

// model PasswordResetRequest {
//   id         String   @id @default(cuid())
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

// model EmailChangeRequest {
//   id         String   @id @default(cuid())
//   identifier String
//   token      String   @unique
//   newEmail   String
//   expires    DateTime
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

// // models music related
// model ArtistProfile {
//   id            String       @id @default(cuid())
//   name          String
//   slug          String       @unique
//   bio           String?
//   albums        Album[]
//   tracks        Track[]
//   createdAt     DateTime     @default(now())
//   updatedAt     DateTime     @updatedAt
//   userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
//   userProfileId String?
// }

// model Album {
//   id        String          @id @default(cuid())
//   title     String
//   artists   ArtistProfile[]
//   tracks    Track[]
//   release   DateTime
//   createdAt DateTime        @default(now())
//   updatedAt DateTime        @updatedAt
// }

// model Track {
//   id               String          @id @default(cuid())
//   albumId          String
//   title            String
//   artists          ArtistProfile[]
//   userPlaylists    UserPlaylist[]
//   album            Album?          @relation(fields: [albumId], references: [id])
//   length           Int
//   release          DateTime
//   createdAt        DateTime        @default(now())
//   updatedAt        DateTime        @updatedAt
//   UserProfile      UserProfile?    @relation(fields: [userProfileId], references: [id])
//   userProfileId    String?
//   played           TrackPlayed[]
//   playedRecently   PlayedRecently? @relation(fields: [playedRecentlyId], references: [id])
//   playedRecentlyId String?
// }

// model UserPlaylist {
//   id             String           @id @default(cuid())
//   title          String
//   author         UserProfile      @relation(fields: [authorId], references: [id])
//   authorId       String
//   tracks         Track[]
//   length         Int
//   userCreatedOn  DateTime
//   createdAt      DateTime         @default(now())
//   updatedAt      DateTime         @updatedAt
//   PlaylistPlayed PlaylistPlayed[]
// }

// model TrackPlayed {
//   id         String   @id @default(cuid())
//   track      Track    @relation(fields: [trackId], references: [id])
//   trackId    String
//   datePlayed DateTime
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

// model PlaylistPlayed {
//   id         String       @id @default(cuid())
//   playlist   UserPlaylist @relation(fields: [playlistId], references: [id])
//   playlistId String
//   datePlayed DateTime
//   createdAt  DateTime     @default(now())
//   updatedAt  DateTime     @updatedAt
// }

// model PlayedRecently {
//   id          String        @id @default(cuid())
//   tracks      Track[]
//   trackId     String
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
//   userProfile UserProfile[]
// }

// enum Role {
//   ADMIN
//   USER
// }
